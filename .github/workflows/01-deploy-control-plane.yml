# /*---------------------------------------------------------------------------8
# |                                                                            |
# |       This workflows deploys the control plane with GitHub Actions         |
# |                                                                            |
# +------------------------------------4--------------------------------------*/

name:                                        01 - Deploy Control Plane
run-name:                                    Deploy Control Plane by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      control_plane_name:
        description:                         'Control Plane Name, use the following syntax: ENV-LOCA-VNET'
        required:                            true
        type:                                environment
      force_reset:
        description:                         'Force a re-install - may require multiple re-runs'
        required:                            false
        type:                                boolean
        default:                             false
      test:
        description:                         'Only run terraform plan'
        required:                            false
        type:                                boolean
        default:                             false
permissions:
  contents:                                  write
  id-token:                                  write
  issues:                                    write

env:
  TF_IN_AUTOMATION:                          true
  TF_LOG:                                    DEBUG
  ANSIBLE_CORE_VERSION:                      '2.16'
  TF_VERSION:                                '1.11.3'

jobs:
  prepare-deployer:
    name:                                    Prepare Deployer
    environment:                             ${{ inputs.control_plane_name }}
    runs-on:                                 ubuntu-latest
    container:
      image:                                 ghcr.io/nnoaman/sap-automation:sdaf-github-actions
    outputs:
      this_agent:                            ${{ steps.prepare_control_plane.outputs.this_agent }}
      deployer_keyvault:                     ${{ steps.prepare_control_plane.outputs.deployer_keyvault }}
      app_config_name:                       ${{ steps.prepare_control_plane.outputs.app_config_name }}
      msi_id:                                ${{ steps.prepare_control_plane.outputs.msi_id }}

    steps:
      - name:                                Checkout the code
        uses:                                actions/checkout@v4
        with:
          fetch-depth:                       0
          token:                             ${{ secrets.GITHUB_TOKEN }}

      - name:                                Configure Git Safe Directory
        run:                                 |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global --add safe.directory "/__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}"

      - name:                                Get app token
        id:                                  get_workflow_token
        uses:                                peter-murray/workflow-application-token-action@v4
        with:
          application_id:                    ${{ secrets.APPLICATION_ID }}
          application_private_key:           ${{ secrets.APPLICATION_PRIVATE_KEY }}
          #organization:                     ${{ github.repository_owner }}

      - name:                                Azure Login with Service Principal
        if:                                  ${{ vars.USE_MSI != 'true' }}
        uses:                                Azure/Login@v2
        with:
          client-id:                         ${{ vars.ARM_CLIENT_ID }}
          tenant-id:                         ${{ vars.ARM_TENANT_ID }}
          subscription-id:                   ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name:                                Azure Login with initial Service Principal to create the self-hosted runner
        if:                                  ${{ vars.USE_MSI == 'true' }}
        uses:                                Azure/Login@v2
        with:
          client-id:                         ${{ vars.ARM_SPN_CLIENT_ID }}
          tenant-id:                         ${{ vars.ARM_TENANT_ID }}
          subscription-id:                   ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name:                                Prepare Control Plane
        id:                                  prepare_control_plane
        run:                                 |
          echo "Running control plane preparation"
          cd ${SAP_AUTOMATION_REPO_PATH}
          bash deploy/scripts/pipeline_scripts/v2/01-control-plane-prepare.sh
        env:
          CONTROL_PLANE_NAME:                ${{ inputs.control_plane_name }}
          APPLICATION_CONFIGURATION_NAME:    ${{ vars.APPLICATION_CONFIGURATION_NAME }}
          FORCE_RESET:                       ${{ inputs.force_reset }}
          IS_PIPELINE_DEPLOYMENT:            true
          ARM_CLIENT_ID:                     ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET:                 ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID:               ${{ vars.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID:                     ${{ vars.ARM_TENANT_ID }}
          WEB_APP_CLIENT_SECRET:             ${{ secrets.WEB_APP_CLIENT_SECRET }}
          TF_VAR_agent_pool:                 'Default'
          TF_VAR_spn_id:                     ${{ vars.ARM_CLIENT_ID }}
          TF_VAR_ansible_core_version:       ${{ env.ANSIBLE_CORE_VERSION }}
          TF_VAR_tf_version:                 ${{ env.TF_VERSION }}
          TF_VAR_app_registration_app_id:    ${{ vars.APP_REGISTRATION_APP_ID }}
          APP_TOKEN:                         ${{ steps.get_workflow_token.outputs.token }}
          TF_VAR_github_app_token:           ${{ steps.get_workflow_token.outputs.token }}

  populate-keyvault:
    name:                                    Save Deployment Credentials in Azure Keyvault
    environment:                             ${{ inputs.control_plane_name }}
    needs:                                   prepare-deployer
    runs-on:                                 self-hosted
    container:
      image:                                 ghcr.io/nnoaman/sap-automation:sdaf-github-actions

    steps:
      - name:                                Checkout the code
        uses:                                actions/checkout@v4
        with:
          token:                             ${{ secrets.GITHUB_TOKEN }}
          fetch-depth:                       0
          ref:                               ${{ github.ref }}
          clean:                             true

      - name:                                Get app token
        id:                                  get_workflow_token
        uses:                                peter-murray/workflow-application-token-action@v4
        with:
          application_id:                    ${{ secrets.APPLICATION_ID }}
          application_private_key:           ${{ secrets.APPLICATION_PRIVATE_KEY }}
          #organization:                     ${{ github.repository_owner }}

      - name:                                Azure Login with Managed Identity
        if:                                  ${{ vars.USE_MSI == 'true' }}
        uses:                                Azure/login@v2
        with:
          auth-type:                         IDENTITY
          tenant-id:                         ${{ vars.ARM_TENANT_ID }}
          subscription-id:                   ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name:                                Azure Login with Service Principal
        if:                                  ${{ vars.USE_MSI != 'true' }}
        uses:                                Azure/Login@v2
        with:
          creds:                             |
           {
                                             "clientId": "${{ vars.ARM_CLIENT_ID }}",
                                             "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
                                             "subscriptionId": "${{ vars.ARM_SUBSCRIPTION_ID }}",
                                             "tenantId": "${{ vars.ARM_TENANT_ID }}"
           }
      - name:                                Azure Login with Service Principal
        if:                                  ${{ vars.USE_MSI != 'true' }}
        uses:                                Azure/Login@v2
        with:
          client-id:                         ${{ vars.ARM_CLIENT_ID }}
          tenant-id:                         ${{ vars.ARM_TENANT_ID }}
          subscription-id:                   ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name:                                Parameter Validation
        id:                                  parameter_validation
        run:                                 |
          cd ${SAP_AUTOMATION_REPO_PATH}
          bash deploy/scripts/pipeline_scripts/v2/00-store-secrets-in-keyvault.sh
        env:
          APPLICATION_CONFIGURATION_NAME:    ${{ vars.APPLICATION_CONFIGURATION_NAME }}
          APP_TOKEN:                         ${{ steps.get_workflow_token.outputs.token }}
          ARM_SUBSCRIPTION_ID:               ${{ vars.ARM_SUBSCRIPTION_ID }}
          CLIENT_ID:                         ${{ vars.ARM_CLIENT_ID }}
          CLIENT_SECRET:                     ${{ secrets.ARM_CLIENT_SECRET }}
          CONTROL_PLANE_NAME:                ${{ inputs.control_plane_name }}
          DEPLOYER_KEYVAULT:                 ${{ vars.DEPLOYER_KEYVAULT }}
          OBJECT_ID:                         ${{ vars.ARM_OBJECT_ID }}
          TENANT_ID:                         ${{ vars.ARM_TENANT_ID }}
          TF_VAR_agent_pool:                 'Default'
          TF_VAR_ansible_core_version:       ${{ env.ANSIBLE_CORE_VERSION }}
          TF_VAR_app_registration_app_id:    ${{ vars.APP_REGISTRATION_APP_ID }}
          TF_VAR_tf_version:                 ${{ env.TF_VERSION }}
          TF_VAR_github_app_token:           ${{ steps.get_workflow_token.outputs.token }}
          USE_MSI:                           ${{ vars.USE_MSI }}
          ZONE:                              ${{ inputs.control_plane_name }}

  deploy-control-plane:
    name:                                    Deploy Control Plane
    environment:                             ${{ inputs.control_plane_name }}
    needs:                                   [prepare-deployer, populate-keyvault]
    runs-on:                                 self-hosted
    container:
      image:                                 ghcr.io/nnoaman/sap-automation:sdaf-github-actions
    outputs:
      HAS_WEBAPP:                            ${{ steps.get_webapp_variables.outputs.HAS_WEBAPP }}
      APPSERVICE_NAME:                       ${{ steps.get_webapp_variables.outputs.APPSERVICE_NAME }}

    steps:

      - name:                                Configure Git Safe Directory
        run:                                 |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global --add safe.directory "/__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}"

      - name:                                Checkout the code
        uses:                                actions/checkout@v4
        with:
          fetch-depth:                       0
          ref:                               ${{ github.ref }}
          clean:                             true
          token:                             ${{ secrets.GITHUB_TOKEN }}

      - name:                                Get app token
        id:                                  get_workflow_token
        uses:                                peter-murray/workflow-application-token-action@v4
        with:
          application_id:                    ${{ secrets.APPLICATION_ID }}
          application_private_key:           ${{ secrets.APPLICATION_PRIVATE_KEY }}
          #organization:                     ${{ github.repository_owner }}

      - name:                                Azure Login with Managed Identity
        if:                                  ${{ vars.USE_MSI == 'true' }}
        uses:                                Azure/login@v2
        with:
          auth-type:                         IDENTITY
          tenant-id:                         ${{ vars.ARM_TENANT_ID }}
          subscription-id:                   ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name:                                Azure Login with Service Principal
        if:                                  ${{ vars.USE_MSI != 'true' }}
        uses:                                Azure/Login@v2
        with:
          client-id:                         ${{ vars.ARM_CLIENT_ID }}
          tenant-id:                         ${{ vars.ARM_TENANT_ID }}
          subscription-id:                   ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name:                                Deploy Control Plane
        run:                                 |
          echo "Running control plane deployment"
          cd ${SAP_AUTOMATION_REPO_PATH}
          bash deploy/scripts/pipeline_scripts/v2/01-control-plane-deploy.sh
        env:
          APPLICATION_CONFIGURATION_NAME:    ${{ vars.APPLICATION_CONFIGURATION_NAME }}
          APP_TOKEN:                         ${{ steps.get_workflow_token.outputs.token }}
          CLIENT_ID:                         ${{ vars.ARM_CLIENT_ID }}
          CLIENT_SECRET:                     ${{ secrets.ARM_CLIENT_SECRET }}
          CONTROL_PLANE_NAME:                ${{ inputs.control_plane_name }}
          DEPLOYER_KEYVAULT:                 ${{ vars.DEPLOYER_KEYVAULT }}
          APP_REGISTRATION_APP_ID:           ${{ vars.APP_REGISTRATION_APP_ID }}
          DEPLOYER_TFSTATE_KEY:              "${{ inputs.control_plane_name }}-INFRASTRUCTURE.terraform.tfstate"
          FORCE_RESET:                       ${{ inputs.force_reset }}
          IS_PIPELINE_DEPLOYMENT:            true
          OBJECT_ID:                         ${{ vars.ARM_OBJECT_ID }}
          ARM_SUBSCRIPTION_ID:               ${{ vars.ARM_SUBSCRIPTION_ID }}
          TENANT_ID:                         ${{ vars.ARM_TENANT_ID }}
          TF_VAR_tf_version:                 ${{ env.TF_VERSION }}
          TF_VAR_agent_pool:                 'Default'
          TF_VAR_ansible_core_version:       ${{ env.ANSIBLE_CORE_VERSION }}
          TF_VAR_app_registration_app_id:    ${{ vars.APP_REGISTRATION_APP_ID }}
          TF_VAR_subscription_id:            ${{ vars.ARM_SUBSCRIPTION_ID }}
          TF_VAR_github_app_token:           ${{ steps.get_workflow_token.outputs.token }}
          tf_version:                        ${{ env.TF_VERSION }}
          TF_VAR_use_spn:                    ${{ vars.USE_MSI }}
          USE_MSI:                           ${{ vars.USE_MSI }}

  deploy-web-app:
    name:                                    Deploy SAP Configuration Web App
    needs:                                   [prepare-deployer, deploy-control-plane]
    if:                                      needs.deploy-control-plane.outputs.HAS_WEBAPP == 'true'
    runs-on:                                 ${{ needs.prepare-deployer.outputs.this_agent || 'ubuntu-latest' }}

    steps:
      - name:                                Checkout Repository
        uses:                                actions/checkout@v4
        with:
          path:                              sap-automation

      - name:                                Setup .NET Core
        uses:                                actions/setup-dotnet@v3
        with:
          dotnet-version:                    '7.0.x'

      - name:                                Build Web Application
        run:                                 |
          dotnet build "${{ github.workspace }}/sap-automation/Webapp/SDAF/*.csproj"

      - name:                                Publish Web Application
        run:                                 |
          dotnet publish "${{ github.workspace }}/sap-automation/Webapp/SDAF/*.csproj" --output webapp-publish --configuration Release
          cd webapp-publish
          zip -r ../webapp.zip *

      - name:                                Azure Login with Managed Identity
        if:                                  ${{ vars.USE_MSI == 'true' }}
        uses:                                Azure/login@v2
        with:
          auth-type:                         IDENTITY
          tenant-id:                         ${{ vars.ARM_TENANT_ID }}
          subscription-id:                   ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name:                                Azure Login with Service Principal
        if:                                  ${{ vars.USE_MSI != 'true' }}
        uses:                                Azure/Login@v2
        with:
          client-id:                         ${{ vars.ARM_CLIENT_ID }}
          tenant-id:                         ${{ vars.ARM_TENANT_ID }}
          subscription-id:                   ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name:                                Deploy Web App
        uses:                                azure/webapps-deploy@v2
        with:
          app-name:                          ${{ needs.deploy-control-plane.outputs.APPSERVICE_NAME }}
          package:                           webapp.zip
          startup-command:                   ''

      - name:                                Configure Web App
        run:                                 |
          az webapp config appsettings set --name ${{ needs.deploy-control-plane.outputs.APPSERVICE_NAME }} \
            --settings \
            'CollectionUri=${{ github.server_url }}' \
            'ProjectName=${{ github.repository }}' \
            'RepositoryId=${{ github.repository }}' \
            'SourceBranch=${{ github.ref_name }}' \
            'IS_PIPELINE_DEPLOYMENT=true' \
            'CONTROL_PLANE_NAME=${{ inputs.control_plane_name }}'

      - name:                                Document Web App Configuration Steps
        run:                                 |
          echo "Web App Configuration Steps"
          cd ${SAP_AUTOMATION_REPO_PATH}
          bash ./sap-automation/deploy/scripts/pipeline_scripts/01-webapp-configuration.sh
        env:
          CONTROL_PLANE_NAME:                ${{ inputs.control_plane_name }}
          APP_REGISTRATION_APP_ID:           ${{ env.APP_REGISTRATION_APP_ID }}
